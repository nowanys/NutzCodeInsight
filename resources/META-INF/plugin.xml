<idea-plugin>
    <id>com.sgaop.idea.codeinsight.plugin</id>
    <name>NutzCodeInsight</name>
    <version>2.0.7</version>
    <vendor email="huchuc@vip.qq.com" url="https://github.com/threefish/NutzCodeInsight">threefish</vendor>
    <description><![CDATA[
      <h1>Intellij idea plugin for <a href="https://github.com/nutzam/nutz">Nutz</a></h1>
      <br/>
      <p>
      <b>
      <a href="https://github.com/threefish/NutzCodeInsight">GitHub</a> |
      <a href="https://github.com/threefish/NutzCodeInsight/issues">Issues</a>
      </b>
      </p>
      <p>
       <b>English</b>
       <ul>
         <li> 1、Support the Nutz Boot project to build quickly</li>
         <li> 2、Click on the template icon in front of @Ok in Nutz Action to quickly open or switch to an already opened template file.</li>
         <li> 3、Fast positioning of framework resource files supporting HTML, JSP and other format files as templates (can be dynamically configured)</li>
         <li> 4、Add a Find @At Map Address Shortcut to the Navigate Menu</li>
         <li> 5、Support for folding display of internationalized configuration file variable values ​​in the Nutz web environment (shortcut: Alt++ or Alt+-)</li>
         <li> 6、The Beetl template also supports internationalization profile folding (${i18n("login.sucess")} or ${i18n("login.sucess","parameter 1","parameter N")} ) (shortcut: Alt++) Or Alt+-)</li>
         <li> 7、Nutz supports folding display java class injection configuration file variable value @Inject("java:$conf.get('attach.savePath')") (shortcut: Alt++ or Alt+-)</li>
         <li> 8、@Inject("java:$conf.get('attach.savePath')") You can jump to each other in java files and configuration files by ctrl+click or ctrl+b</li>
         <li> 9、Quickly create interfaces and implementation classes in the support entity class (shortcut: Alt + insert )</li>
         <li> 10、@SQL sql supports dynamic language highlighting and prompts</li>
         <li> 11、Dynamic highlighting and prompting of sql language in SQL template in <a href="https://github.com/threefish/nutz-sqltpl">Nutz-sqltpl</a> xml</li>
         <li> 12、<a href="https://github.com/threefish/nutz-sqltpl">Nutz-sqltpl</a> supports xml and java files to jump to each other</li>
         <li> 13、<a href="https://github.com/threefish/nutz-sqltpl">Nutz-sqltpl</a> quickly generates the corresponding xml template for the @SqlsXml annotation that has not yet created the xml template file (shortcut: Alt + insert )</li>
       </ul>
       <b>中文</b>
       <ul>
         <li> 1、支持NutzBoot项目快速搭建</li>
         <li> 2、在 Nutz Action 中点击 @Ok 前面的模版图标即可快速打开或切换至已经打开的模版文件</li>
         <li> 3、支持以HTML、JSP等格式文件作为模版的框架资源文件的快速定位（支持动态配置）</li>
         <li> 4、Navigate菜单中增加查找@At映射地址快捷方式</li>
         <li> 5、Nutz web环境中支持折叠显示国际化配置文件变量值（快捷键：Alt++或Alt+-）</li>
         <li> 6、Beetl模版中也支持国际化配置文件折叠(${i18n("login.sucess")}或者${i18n("login.sucess","参数1","参数N")} )（快捷键：Alt++或Alt+-）</li>
         <li> 7、Nutz 支持折叠显示java类中注入配置文件变量值 @Inject("java:$conf.get('attach.savePath')")（快捷键：Alt++或Alt+-）</li>
         <li> 8、@Inject("java:$conf.get('attach.savePath')") 可以通过 ctrl+click 或 ctrl+b 在java文件与配置文件中互相跳转</li>
         <li> 9、支持实体类中快速创建接口与实现类（快捷键：Alt+insert）</li>
         <li> 10、@SQL中的sql支持动态语言高亮和提示</li>
         <li> 11、<a href="https://github.com/threefish/nutz-sqltpl">Nutz-sqltpl</a> xml中的SQL模板中sql语言的动态高亮和提示</li>
         <li> 12、<a href="https://github.com/threefish/nutz-sqltpl">Nutz-sqltpl</a> 支持xml与java文件互相跳转</li>
         <li> 13、<a href="https://github.com/threefish/nutz-sqltpl">Nutz-sqltpl</a> 为还未创建xml模板文件的@SqlsXml注解快速生成对应xml模板 （快捷键：Alt+insert</li>
       </ul>
      </p>
      <br/>
      <p><img src="https://raw.githubusercontent.com/threefish/NutzCodeInsight/master/image/NutzCodeInsight.gif" alt="NutzCodeInsight.gif"/></p>
      <p><img src="https://raw.githubusercontent.com/threefish/NutzCodeInsight/master/image/ReferenceContributor.gif" alt="ReferenceContributor.gif"/></p>
      <p><img src="https://raw.githubusercontent.com/threefish/NutzCodeInsight/master/image/NutzSqlTpl.gif" alt="NutzSqlTpl.gif"/></p>
      <br/>
      <p><a href="https://github.com/threefish/NutzCodeInsight/issues">Send feedback</a></p>
    ]]>
    </description>
    <change-notes><![CDATA[
    <b>2.0.7</b>
       <ul>
         <li> 1、添加 <a href="https://github.com/threefish/nutz-sqltpl">Nutz-sqltpl</a> xml中的SQL模板中sql语言的动态高亮和提示</li>
         <li> 2、添加 <a href="https://github.com/threefish/nutz-sqltpl">Nutz-sqltpl</a> 支持xml与java文件互相跳转</li>
         <li> 3、添加 <a href="https://github.com/threefish/nutz-sqltpl">Nutz-sqltpl</a> 为还未创建xml模板文件的@SqlsXml注解快速生成对应xml模板 </li>
         <li> 4、fix bug https://github.com/nutzam/nutzboot/issues/157  </li>
       </ul>
       <p>
      <b>2.0.6.fix</b>
       <ul>
        <li>fix bug: https://github.com/nutzam/nutzboot/issues/157 </li>
       </ul>
        <b>2.0.6</b>
       <ul>
        <li>Add: Class File Symbol can quickly find the mapped address, faster than "Find Nutz At Mapping Url"</li>
        <li>Update: Cancel the asynchronous scanning At Mapping mechanism, but continue to use the cache, to some extent, to quickly find the mapped address</li>
        <li>移除：快速生成接口和实现类 如需要可以下载 <a href='https://plugins.jetbrains.com/plugin/11575-nutzfw'>NutzFwCodeGenerat</a>使用</li>
        <li>添加：Class  File  Symbol 中可以快速查找映射地址，速度优于"Find Nutz At Mapping Url"</li>
        <li>更新：取消异步扫描AtMapping机制，但继续使用缓存，一定程度上达到快速查找映射地址</li>
       </ul>
       <p>
         <b>2.0.3</b>
       <ul>
        <li>Update: Add asynchronous scanning At Mapping mechanism and implement caching to achieve fast search mapping address.</li>
        <li>更新：添加异步扫描AtMapping机制，并实现缓存，达到快速查找映射地址</li>
       </ul>
      </p>
    ]]>
    </change-notes>
    <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description -->
    <idea-version since-build="145.0"/>
    <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html
         on how to target different products -->
    <!-- uncomment to enable plugin in all products
    <depends>com.intellij.modules.lang</depends>
    -->
    <depends>com.intellij.modules.java</depends>
    <depends>com.intellij.properties</depends>
    <extensions defaultExtensionNs="com.intellij">
        <!-- Add your extensions here -->
        <applicationConfigurable instance="com.sgaop.idea.project.ToolConfigurable"/>
        <applicationService serviceInterface="com.sgaop.idea.project.ToolCfiguration"
                            serviceImplementation="com.sgaop.idea.project.ToolCfiguration"/>
        <!--NutzAction快速跳转模版文件-->
        <codeInsight.lineMarkerProvider language="JAVA"
                                        implementationClass="com.sgaop.idea.linemarker.JavaNutzLineMarkerProvider"/>
        <!--模版文件快速跳转资源文件-->
        <codeInsight.lineMarkerProvider language="HTML"
                                        implementationClass="com.sgaop.idea.linemarker.HtmlTemplateLineMarkerProvider"/>
        <!--@SqlXml快速跳转sql模版文件-->
        <codeInsight.lineMarkerProvider language="JAVA"
                                        implementationClass="com.sgaop.idea.linemarker.JavaSqlsXmlLineMarkerProvider"/>
        <!--代码折叠生成器-->
        <!--国际化语言折叠-开始-->
        <lang.foldingBuilder language="JAVA"
                             implementationClass="com.sgaop.idea.folding.NutzLocalizationFoldingBuilder"/>
        <lang.foldingBuilder language="HTML"
                             implementationClass="com.sgaop.idea.folding.BeetlLocalizationFoldingBuilder"/>
        <!--国际化语言折叠-结束-->
        <!--配置文件注入折叠-开始-->
        <lang.foldingBuilder language="JAVA"
                             implementationClass="com.sgaop.idea.folding.NutzInjectConfFoldingBuilder"/>
        <!--配置文件引用-->
        <psi.referenceContributor
                implementation="com.sgaop.idea.reference.NutzInjectToPropsReferenceContributor"/>
        <!--配置文件折叠-结束-->
        <!--语言中代码提示-->
        <!--<completion.contributor language="SQL" implementationClass="com.sgaop.idea.contributor.SqlParamCompletionContributor"-->
        <!--order="first"/>-->
        <!--语言注入-->
        <multiHostInjector implementation="com.sgaop.idea.injector.NutzJavaSqlMultiHostInjector"/>
        <multiHostInjector implementation="com.sgaop.idea.injector.XmlSqlTplMultiHostInjector"/>
        <!--语言扩展点-注解者 -->
        <annotator language="JAVA" implementationClass="com.sgaop.idea.annotator.JavaSqlXmlAnnotator"/>
        <annotator language="XML" implementationClass="com.sgaop.idea.annotator.XmlExpTagAnnotator"/>
        <!--创建NutzBoot项目-->
        <moduleBuilder builderClass="com.sgaop.idea.project.module.NutzBootModuleBuilder"/>
        <!--快速定位至NutzAction-->
        <gotoSymbolContributor implementation="com.sgaop.idea.actions.AtMappingContributor"/>
        <gotoClassContributor implementation="com.sgaop.idea.actions.AtMappingContributor"/>
        <gotoFileContributor implementation="com.sgaop.idea.actions.AtMappingContributor"/>
        <!--意图行动-->
        <intentionAction order="first">
            <className>com.sgaop.idea.intention.GenerateSqlXmlIntention</className>
        </intentionAction>
        <fileTemplateGroup id="NutzSqlTpl" implementation="com.sgaop.idea.template.SqlTplFileTemplateGroupFactory"></fileTemplateGroup>
    </extensions>
    <actions>
        <!--快速定位至NutzAction-->
        <action id="GoToRequestMapping" class="com.sgaop.idea.actions.GoToNutzAtMappingAction"
                text="Find Nutz @At Mapping Url" description="Find Nutz At Mapping Url">
            <add-to-group group-id="GoToTargetEx" anchor="first"/>
        </action>
    </actions>

</idea-plugin>